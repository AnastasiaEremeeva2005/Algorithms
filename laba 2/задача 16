class Node:
    def __init__(self, key):
        self.key = key # ключ, который хранит узел
        self.left = None #ссылки на левого и правого ребёнка соответственно
        self.right = None #ссылки на левого и правого ребёнка соответственно
        self.height = 1 #высота узла (максимальная высота поддерева).
        self.size = 1  # Размер поддерева корнем которого является текущий узел (с учетом этого узла)

class AVLTree:
    def get_height(self, node): #возвращаем высоту узла Если узел пустой, возвращаем 0
        return node.height if node else 0
    def get_size(self, node):# возвращаем размер поддерева для узла.
        return node.size if node else 0
    def update(self, node):#обновляем высоту и размер текущего узла, используя высоты и размеры его потомков
        if node:
            node.height = 1 + max(self.get_height(node.left), self.get_height(node.right))
            node.size = 1 + self.get_size(node.left) + self.get_size(node.right)
    def rotate_right(self, y): # правый поврот, если левая ветвь дерева перевешена
        x = y.left
        T2 = x.right
        # Поворот
        x.right = y
        y.left = T2
        # Обновляем высоту и размер поддеревьев
        self.update(y)
        self.update(x)
        return x
    def rotate_left(self, x):# левый поврот, если правая ветвь дерева перевешена
        y = x.right
        T2 = y.left
        # Поворот
        y.left = x
        x.right = T2
        # Обновляем высоту и размер поддеревьев
        self.update(x)
        self.update(y)
        return y

    def get_balance(self, node): #если результат больше 0, эначит левое поддерево выше правого,если результат меньше 0, значит что правое поддерево выше левого
        if not node:
            return 0
        return self.get_height(node.left) - self.get_height(node.right)#если результат 0,значит, что поддеревья имеют одинаковую высоту, и узел сбалансирован.

    def insert(self, node, key):
        if not node: #Если текущий узел None, это значит, что мы достигли места, где следует вставить новый узел
            return Node(key) #Мы создаем новый узел с ключом key и возвращаем его.
        if key < node.key:#Если key меньше, чем node.key,то  рекурсивно вызываем метод insert для левого поддерева
            node.left = self.insert(node.left, key)
        else:
            node.right = self.insert(node.right, key) #Если key больше или равен, то вызываем метод для правого поддерева
        # Обновляем текущий узел
        self.update(node)
        # Балансировка
        balance = self.get_balance(node)
        # Левый поворот
        if balance > 1 and key < node.left.key:
            return self.rotate_right(node)
        # Правый поворот
        if balance < -1 and key > node.right.key:
            return self.rotate_left(node)
        # Левый-правый
        if balance > 1 and key > node.left.key:
            node.left = self.rotate_left(node.left)
            return self.rotate_right(node)
        # Правый-левый
        if balance < -1 and key < node.right.key:
            node.right = self.rotate_right(node.right)
            return self.rotate_left(node)
        return node

    def min_value_node(self, node):
        if node is None or node.left is None:
            return node
        return self.min_value_node(node.left)

    def delete(self, node, key):
        if not node: #остановить рекурсию в случае, если ключ не найден в дереве
            return node
        if key < node.key: #Если  key меньше, чем ключ текущего узла, то рекурсивно вызываем метод delete для левого дочернего узла
            node.left = self.delete(node.left, key)
        elif key > node.key: #Если ключ key больше, чем ключ текущего узла, продолжаем поиск в правом поддереве
            node.right = self.delete(node.right, key)
        else:#Когда  ключ совпадает с node.keyт значит мы дошли рекурсионно и  его нужно удалить.
            # Узел с одним или без детей
            if node.left is None:
                return node.right
            elif node.right is None:
                return node.left
            # Узел с двумя детьми, получаем следующий по возрастанию узел
            temp = self.min_value_node(node.right)
            node.key = temp.key
            node.right = self.delete(node.right, temp.key)
        # Обновляем текущий узел
        self.update(node)
        # Балансировка
        balance = self.get_balance(node)
        # Левый поворот
        if balance > 1 and self.get_balance(node.left) >= 0:
            return self.rotate_right(node)
        # Правый поворот
        if balance < -1 and self.get_balance(node.right) <= 0:
            return self.rotate_left(node)
        # Левый-правый
        if balance > 1 and self.get_balance(node.left) < 0:
            node.left = self.rotate_left(node.left)
            return self.rotate_right(node)
        # Правый-левый
        if balance < -1 and self.get_balance(node.right) > 0:
            node.right = self.rotate_right(node.right)
            return self.rotate_left(node)
        return node

    def find_kth_max(self, node, k):
        if not node: #достигли конца дерева, и k-й максимальный элемент не найден.
            return None
        right_size = self.get_size(node.right) # кол-во узлов в правом поддереве текущего узла(используется для определения позиции текущего узла относительно k-го максимума)
        # Если в правом поддереве ровно (k-1) элементов, то текущий узел — это k-й максимум
        if right_size == k - 1:
            return node.key
        elif right_size >= k:
            return self.find_kth_max(node.right, k)
        else:
            return self.find_kth_max(node.left, k - right_size - 1)

class AVLTreeManager:
    def __init__(self): #Создаем атрибут tree для хранения корня AVL-дерева
        self.tree = None
        self.avl = AVLTree()

    def add(self, key): #вставку элемента с ключом key в дерево self.tree
        self.tree = self.avl.insert(self.tree, key)

    def remove(self, key): #Удаляем элемент с ключом key из дерева self.tree
        self.tree = self.avl.delete(self.tree, key)

    def find_kth_max(self, k):#ищем k-й максимальный элемент в AVL-дереве
        return self.avl.find_kth_max(self.tree, k)


with open('input.txt', 'r') as input_file, open('output.txt', 'w') as output_file:
        n = int(input_file.readline().strip())
        commands = [tuple(map(int, input_file.readline().split())) for _ in range(n)]
        avl_manager = AVLTreeManager()
        result = []
        for command in commands:
            c_type, k = command

            if c_type == 1:
                avl_manager.add(k)
            elif c_type == -1:
                avl_manager.remove(k)
            elif c_type == 0:
                result.append(avl_manager.find_kth_max(k))

        for res in result:
            output_file.write(f"{res}\n")
