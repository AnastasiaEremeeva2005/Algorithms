class Node:
    def __init__(self, key):
        self.key = key
        self.left = None
        self.right = None


class BST:
    def __init__(self):
        self.root = None

    def add_node(self, key):
        if self.root is None:
            self.root = Node(key)
        else:
            self._add_node(self.root, key)

    def _add_node(self, node, key):
        if key < node.key:
            if node.left is None:
                node.left = Node(key)
            else:
                self._add_node(node.left, key)
        else:
            if node.right is None:
                node.right = Node(key)
            else:
                self._add_node(node.right, key)

    def height(self, node):
        if node is None:
            return 0
        return 1 + max(self.height(node.left), self.height(node.right))

    def balance(self, node):
        if node is None:
            return 0
        left_height = self.height(node.left)
        right_height = self.height(node.right)
        return right_height - left_height

    def get_balances(self):
        balances = []
        self._get_balances(self.root, balances)
        return balances

    def _get_balances(self, node, balances):
        if node is None:
            return
        balances.append(self.balance(node))
        self._get_balances(node.left, balances)
        self._get_balances(node.right, balances)


def main():
   with open("input.txt", "r") as in_file, open("output.txt", "w") as out_file:
        n = int(in_file.readline().strip())

        if n == 0:
            out_file.write(str(0))
            return

        # Считываем данные и строим дерево
        nodes = [tuple(map(int, in_file.readline().strip().split())) for _ in range(n)]

        tree = BST() #Создаем экземпляр BST, и в него добавляем узлы
        for key, left, right in nodes:
            tree.add_node(key)

        # Получаем и записываем балансы
        balances = tree.get_balances()
        for balance in balances:
            out_file.write(f"{balance}\n")

if __name__ == '__main__':
    main()
